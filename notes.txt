<----Scroll down the page for Appointment---->
<----add after section appointment form end--->
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			// Get the "Make appointment" button element
			var makeAppointmentButton = document.querySelector('.btn-container a');
	
			// Add click event listener to the button
			makeAppointmentButton.addEventListener('click', function (event) {
				// Prevent default link behavior
				event.preventDefault();
	
				// Get the Y-coordinate of the appointment form section
				var appointmentFormSection = document.getElementById('Appointment-form');
				var appointmentFormYCoordinate = appointmentFormSection.offsetTop;
	
				// Smoothly scroll to the appointment form section
				window.scrollTo({
					top: appointmentFormYCoordinate,
					behavior: 'smooth'
				});
			});
		});
	</script>
	<------End---------->



!----- dynamic image according to department ------!
 
 
# To display images according to the department in Django, you need to ensure that you have stored the images in your static files directory and that your database model contains a field for the image path or URL associated with each department. Then, you can modify your template to dynamically load the corresponding image for each department.

# Here's a step-by-step guide:

# Store Images: Store the images related to each department in your static files directory (static/images/service/ in your case). Make sure the image filenames or paths correspond to the departments in some way.

# Update Model: Assuming you have a model for storing department details, add a field to store the image path or URL for each department. For example:

# python
# Copy code
# from django.db import models

# class Department(models.Model):
#     department_name = models.CharField(max_length=100)
#     department_description = models.TextField()
#     image = models.ImageField(upload_to='department_images/', null=True, blank=True)
# Here, image is the field where you can store the image associated with each department. Ensure you have installed Pillow library (pip install pillow) for handling image files.

# Upload Images: You can upload images for each department through the Django admin interface.

# Update Template: Modify your template to dynamically load the corresponding image for each department. Assuming you have stored the image path in the image field of your DoctorDepartment model:

# html
# Copy code
# <section class="section service-2">
#     <div class="container">
#         <div class="row">
#             {% for d_details in doctor_details %}
#                 <div class="col-lg-4 col-md-6 col-sm-6">
#                     <div class="service-block mb-5">
#                         <img src="{{ d_details.image.url }}" alt="" class="img-fluid">
#                         <div class="content">
#                             <h4 class="mt-4 mb-2 title-color">{{ d_details.department_name }}</h4>
#                             <p class="mb-4" style="text-align:justify">{{ d_details.department_description|truncatechars:100 }}</p>
#                             <div>
#                                 <a href=" " class=" btn btn-primary">Details</a>
#                             </div>
#                         </div>
#                     </div>
#                 </div>
#             {% endfor %}
#         </div>
#     </div>
# </section>
# This assumes that image is a FileField or ImageField in your model and you have configured your STATIC_URL and MEDIA_URL properly in your Django settings.

# Run Migrations: If you've made changes to your model, run the following command to apply these changes to your database:

# Copy code
# python manage.py makemigrations
# python manage.py migrate